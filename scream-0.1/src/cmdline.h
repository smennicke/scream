/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "scream"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "scream"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

enum enum_output { output__NULL = -1, output_arg_lola = 0, output_arg_dot, output_arg_png, output_arg_pdf };
enum enum_outer_strategy { outer_strategy__NULL = -1, outer_strategy_arg_forwards = 0, outer_strategy_arg_backwards };
enum enum_inner_strategy { inner_strategy__NULL = -1, inner_strategy_arg_first = 0, inner_strategy_arg_last };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * product_arg;	/**< @brief Define the product input method.  */
  char * product_orig;	/**< @brief Define the product input method original value given at command line.  */
  const char *product_help; /**< @brief Define the product input method help description.  */
  enum enum_output *output_arg;	/**< @brief Select the output file format(s).  */
  char ** output_orig;	/**< @brief Select the output file format(s) original value given at command line.  */
  unsigned int output_min; /**< @brief Select the output file format(s)'s minimum occurreces */
  unsigned int output_max; /**< @brief Select the output file format(s)'s maximum occurreces */
  const char *output_help; /**< @brief Select the output file format(s) help description.  */
  enum enum_outer_strategy outer_strategy_arg;	/**< @brief Define the outer strategy to compute stage models. (default='forwards').  */
  char * outer_strategy_orig;	/**< @brief Define the outer strategy to compute stage models. original value given at command line.  */
  const char *outer_strategy_help; /**< @brief Define the outer strategy to compute stage models. help description.  */
  enum enum_inner_strategy inner_strategy_arg;	/**< @brief Define the inner strategy to compute stage models. (default='last').  */
  char * inner_strategy_orig;	/**< @brief Define the inner strategy to compute stage models. original value given at command line.  */
  const char *inner_strategy_help; /**< @brief Define the inner strategy to compute stage models. help description.  */
  int all_flag;	/**< @brief If flag is given, all stage models for all sequences are computed. (default=off).  */
  const char *all_help; /**< @brief If flag is given, all stage models for all sequences are computed. help description.  */
  int try_all_flag;	/**< @brief If flag is given, all sequences are tried to find a stage model. (default=off).  */
  const char *try_all_help; /**< @brief If flag is given, all sequences are tried to find a stage model. help description.  */
  int all_given_sequence_flag;	/**< @brief If flag is given, all stage models for a given sequence are computed. (default=off).  */
  const char *all_given_sequence_help; /**< @brief If flag is given, all stage models for a given sequence are computed. help description.  */
  int Result_flag;	/**< @brief Prints result to stdout. (default=off).  */
  const char *Result_help; /**< @brief Prints result to stdout. help description.  */
  char * result_arg;	/**< @brief Prints result to specified file. If no filename is given, it will be derived from the input file..  */
  char * result_orig;	/**< @brief Prints result to specified file. If no filename is given, it will be derived from the input file. original value given at command line.  */
  const char *result_help; /**< @brief Prints result to specified file. If no filename is given, it will be derived from the input file. help description.  */
  char * csv_arg;	/**< @brief Prints result line in CSV format..  */
  char * csv_orig;	/**< @brief Prints result line in CSV format. original value given at command line.  */
  const char *csv_help; /**< @brief Prints result line in CSV format. help description.  */
  int Log_flag;	/**< @brief Prints log to stdout (default=off).  */
  const char *Log_help; /**< @brief Prints log to stdout help description.  */
  char * log_arg;	/**< @brief Prints result to specified file. ....  */
  char * log_orig;	/**< @brief Prints result to specified file. ... original value given at command line.  */
  const char *log_help; /**< @brief Prints result to specified file. ... help description.  */
  int interactive_flag;	/**< @brief Stops when a dead transition or an unsound net was found (default=off).  */
  const char *interactive_help; /**< @brief Stops when a dead transition or an unsound net was found help description.  */
  char * basepath_arg;	/**< @brief This is the bin/ path where all the lola tools are in..  */
  char * basepath_orig;	/**< @brief This is the bin/ path where all the lola tools are in. original value given at command line.  */
  const char *basepath_help; /**< @brief This is the bin/ path where all the lola tools are in. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int product_given ;	/**< @brief Whether product was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int outer_strategy_given ;	/**< @brief Whether outer-strategy was given.  */
  unsigned int inner_strategy_given ;	/**< @brief Whether inner-strategy was given.  */
  unsigned int all_given ;	/**< @brief Whether all was given.  */
  unsigned int try_all_given ;	/**< @brief Whether try-all was given.  */
  unsigned int all_given_sequence_given ;	/**< @brief Whether all-given-sequence was given.  */
  unsigned int Result_given ;	/**< @brief Whether Result was given.  */
  unsigned int result_given ;	/**< @brief Whether result was given.  */
  unsigned int csv_given ;	/**< @brief Whether csv was given.  */
  unsigned int Log_given ;	/**< @brief Whether Log was given.  */
  unsigned int log_given ;	/**< @brief Whether log was given.  */
  unsigned int interactive_given ;	/**< @brief Whether interactive was given.  */
  unsigned int basepath_given ;	/**< @brief Whether basepath was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_output_values[];  /**< @brief Possible values for output. */
extern const char *cmdline_parser_outer_strategy_values[];  /**< @brief Possible values for outer-strategy. */
extern const char *cmdline_parser_inner_strategy_values[];  /**< @brief Possible values for inner-strategy. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
